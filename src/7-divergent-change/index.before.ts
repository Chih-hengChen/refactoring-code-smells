/**
 * 坏味道名称：发散式变化
 * 
 * 一个类或模块因为 不同的原因 被频繁修改，导致其承担了多个不相关的职责。违背了SRP原则。
 * 
 * 识别方式：
 *  1.1：代码因不同原因进行修改
 *  1.2：涉及多个不相关的逻辑
 *  1.3：类中存在多个变更方向
 * 
 * 
 * 每当要对某个上下文做修改时，我们只需要理解这个上下文，而不必操心另一个。
 * 
 * 与霰弹式修改的不同：
 * 发散式变化：一个类 因多种原因被修改（修改集中在同一处，但触发原因不同）。
 * 霰弹式修改：一个需求变化 导致需要修改 多个分散的类（修改分散在不同处，但触发原因相同）。
 */

class UserAccount {
    /* 更新用户资料 */
    updateUserProfile() {
        // 处理用户信息
    }

    /* 是否实名认证 */
    isAuthentication() {
        // 返回用户是否实名
    }

    /* 校验用户输入 */
    validateUserData() {
        // 承担了校验功能（与UserAccount不相关逻辑）
        // 存在多个变动方向
        // 如果检验逻辑需要修改，则该类需要变动
    }

    /* 发送邮件 */
    sendEmailVerification() {
        // 承担了通知功能（与UserAccount不相关逻辑）
        // 多个变更方向
    }
}
